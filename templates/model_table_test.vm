/*
 * Copyright (C) 2017 dubenju@126.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package $!{pkg};

import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * 表$!{table.TableName}的JavaBean类的JUnit测试类.
 * @author dubenju@126.com
 *     这份代码最初是由TeapotOrmGen于$!{genDtTm}自动生成的。
 */
public class Mdl$!fmtter.fmtFun("$!{table.TableName}")Test {

  /**
   * 获取表的名称的测试方法.
   */
  @Test
  public void testGetTblName() {
    Assert.assertEquals("获取的表名称与设定值一致：", "$!fmtter.upper("$!{table.TableName}")", Mdl$!{fmtter.fmtFun("$!{table.TableName}")}.getTblName() );
  }

  /* *************************************************
   * 构造函数
   * *************************************************/
  /**
   * 构造函数的测试方法.
   */
  @Test
  public void testMdl$!fmtter.fmtFun("$!{table.TableName}")() {
  }

  /* *************************************************
   * 方法
   * *************************************************/
#foreach($col in $!{table.Colmuns})
  /**
   * 返回属性$!{fmtter.fmtVar("$!{col.ColumnName}")}的值的测试方法.
   */
  @Test
  public void testGet$!fmtter.fmtFun("$!{col.ColumnName}")() throws Exception {
    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#if(("$!{col.TypeNameJava}" == "java.lang.Boolean"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = false;
#elseif(("$!{col.TypeNameJava}" == "byte[]"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new byte[] {0x31};
#elseif(("$!{col.TypeNameJava}" == "java.lang.Double"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12345.678d;
#elseif(("$!{col.TypeNameJava}" == "java.lang.Float"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12345.678f;
#elseif("$!{col.TypeNameJava}" == "java.lang.Integer")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 54321;
#elseif("$!{col.TypeNameJava}" == "java.lang.Long")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 654321L;
#elseif(("$!{col.TypeNameJava}" == "java.math.BigDecimal"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("2017.1011");
#elseif(("$!{col.TypeNameJava}" == "java.sql.Timestamp") || ("$!{col.TypeNameJava}" == "java.sql.Date") || ("$!{col.TypeNameJava}" == "java.sql.Time"))
    long curTime = System.currentTimeMillis();
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}(curTime);
#elseif(("$!{col.TypeNameJava}" == "java.lang.String"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("$!fmtter.fmtVar("$!{col.ColumnName}")");
#else
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}();
#end

    //(A-1)
    Field nameField = mdl.getClass().getDeclaredField("$!fmtter.fmtVar("$!{col.ColumnName}")"); //(1)
    nameField.setAccessible(true);  //(2)
    nameField.set(mdl, $!fmtter.fmtVar("$!{col.ColumnName}"));  //(3)

    //(A-2)
    Assert.assertEquals("获取属性$!{fmtter.fmtVar("$!{col.ColumnName}")}的值与设定内容一致：", $!fmtter.fmtVar("$!{col.ColumnName}"),
        mdl.get$!fmtter.fmtFun("$!{col.ColumnName}")());
  }

  /**
   * 设置属性$!{fmtter.fmtVar("$!{col.ColumnName}")}的值的测试方法.
   */
#if(0 <= $col.getTypeNameJava().indexOf("ArrayList"))
  @SuppressWarnings("unchecked")
#end
  @Test
  public void testSet$!fmtter.fmtFun("$!{col.ColumnName}")() throws Exception {
    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#if(("$!{col.TypeNameJava}" == "java.lang.Boolean"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = true;
#elseif(("$!{col.TypeNameJava}" == "byte[]"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new byte[] {0x32};
#elseif(("$!{col.TypeNameJava}" == "java.lang.Double"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12346.679d;
#elseif(("$!{col.TypeNameJava}" == "java.lang.Float"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12355.668f;
#elseif("$!{col.TypeNameJava}" == "java.lang.Integer")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 54421;
#elseif("$!{col.TypeNameJava}" == "java.lang.Long")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 654221L;
#elseif(("$!{col.TypeNameJava}" == "java.math.BigDecimal"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("2017.10111");
#elseif(("$!{col.TypeNameJava}" == "java.sql.Timestamp") || ("$!{col.TypeNameJava}" == "java.sql.Date") || ("$!{col.TypeNameJava}" == "java.sql.Time"))
    long curTime = System.currentTimeMillis();
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}(curTime);
#elseif(("$!{col.TypeNameJava}" == "java.lang.String"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("$!fmtter.fmtVar("$!{col.ColumnName}")");
#else
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}();
#end

    //(B-1)
    Field nameField = mdl.getClass().getDeclaredField("$!fmtter.fmtVar("$!{col.ColumnName}")"); //(1)
    nameField.setAccessible(true);  //(2)
    mdl.set$!fmtter.fmtFun("$!{col.ColumnName}")($!fmtter.fmtVar("$!{col.ColumnName}"));

    //(B-2)
    Assert.assertEquals("设置属性$!{fmtter.fmtVar("$!{col.ColumnName}")}的值与设定内容一致：", $!fmtter.fmtVar("$!{col.ColumnName}"),
        ($!{col.TypeNameJava}) nameField.get(mdl));  //(3)
  }
#end

  /**
   * 返回MdlTblTest的字符串表示形式的测试方法.
   */
  @Test
  public void testToString() {
    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdl = null;
    StringBuffer stringBuffer = null;
    mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
    stringBuffer = new StringBuffer();
#foreach($col in $!{table.Colmuns})
    stringBuffer.append("null#if(${velocityCount} < $!table.getColmuns().size()),#end");
#end
    Assert.assertEquals(stringBuffer.toString(), mdl.toString());

    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdlAllCol = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#foreach($col in $!{table.Colmuns})

    mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#if(("$!{col.TypeNameJava}" == "java.lang.Boolean"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = true;
#elseif(("$!{col.TypeNameJava}" == "byte[]"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new byte[] {0x32};
#elseif(("$!{col.TypeNameJava}" == "java.lang.Double"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12346.679d;
#elseif(("$!{col.TypeNameJava}" == "java.lang.Float"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12355.668f;
#elseif("$!{col.TypeNameJava}" == "java.lang.Integer")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 54421;
#elseif("$!{col.TypeNameJava}" == "java.lang.Long")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 654221L;
#elseif(("$!{col.TypeNameJava}" == "java.math.BigDecimal"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("2017.10111");
#elseif(("$!{col.TypeNameJava}" == "java.sql.Timestamp") || ("$!{col.TypeNameJava}" == "java.sql.Date") || ("$!{col.TypeNameJava}" == "java.sql.Time"))
    long $!fmtter.fmtVar("$!{col.ColumnName}")CurTime = System.currentTimeMillis();
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}($!fmtter.fmtVar("$!{col.ColumnName}")CurTime);
#elseif(("$!{col.TypeNameJava}" == "java.lang.String"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("$!fmtter.fmtVar("$!{col.ColumnName}")");
#else
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}();
#end
    mdl.set$!fmtter.fmtFun("$!{col.ColumnName}")($!fmtter.fmtVar("$!{col.ColumnName}"));
    mdlAllCol.set$!fmtter.fmtFun("$!{col.ColumnName}")($!fmtter.fmtVar("$!{col.ColumnName}"));
#set($curCol="$!{col.ColumnName}")
    stringBuffer = new StringBuffer();
#foreach($col in $!{table.Colmuns})
#if("$!{col.ColumnName}" == "$!curCol")
    stringBuffer.append(mdl.get$!fmtter.fmtFun("$!{col.ColumnName}")());
#else
    stringBuffer.append("null");
#end
#if(${velocityCount} < $!table.getColmuns().size())
    stringBuffer.append(",");
#end
#end
    Assert.assertEquals(stringBuffer.toString(), mdl.toString());
#end
    Assert.assertEquals(#foreach($col in $!{table.Colmuns})#if(${velocityCount} > 1) + #{end}mdlAllCol.get$!fmtter.fmtFun("$!{col.ColumnName}")()
        + "#if(${velocityCount} < $!table.getColmuns().size()),#end"#end, mdlAllCol.toString());
  }


  /**
   * 通过键名获取值的测试方法.
   */
  @Test
  public void testGetValueByKey() {
    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#foreach($col in $!{table.Colmuns})
#if(("$!{col.TypeNameJava}" == "java.lang.Boolean"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = true;
#elseif(("$!{col.TypeNameJava}" == "byte[]"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new byte[] {0x32};
#elseif(("$!{col.TypeNameJava}" == "java.lang.Double"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12346.679d;
#elseif(("$!{col.TypeNameJava}" == "java.lang.Float"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12355.668f;
#elseif("$!{col.TypeNameJava}" == "java.lang.Integer")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 54421;
#elseif("$!{col.TypeNameJava}" == "java.lang.Long")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 654221L;
#elseif(("$!{col.TypeNameJava}" == "java.math.BigDecimal"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("2017.10111");
#elseif(("$!{col.TypeNameJava}" == "java.sql.Timestamp") || ("$!{col.TypeNameJava}" == "java.sql.Date") || ("$!{col.TypeNameJava}" == "java.sql.Time"))
    long $!fmtter.fmtVar("$!{col.ColumnName}")CurTime = System.currentTimeMillis();
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}($!fmtter.fmtVar("$!{col.ColumnName}")CurTime);
#elseif(("$!{col.TypeNameJava}" == "java.lang.String"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("$!fmtter.fmtVar("$!{col.ColumnName}")");
#else
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}();
#end
    mdl.set$!fmtter.fmtFun("$!{col.ColumnName}")($!fmtter.fmtVar("$!{col.ColumnName}"));
#end

#foreach($col in $!{table.Colmuns})
    Assert.assertEquals(mdl.get$!fmtter.fmtFun("$!{col.ColumnName}")(),
        mdl.getValueByKey(Mdl$!fmtter.fmtFun("$!{table.TableName}").$!{col.ColumnName}));
#end

  }
  /**
   * 通过键名设置值的测试方法.
   */
  @Test
  public void testSetValueByKey() {
    Mdl$!fmtter.fmtFun("$!{table.TableName}") mdl = new Mdl$!fmtter.fmtFun("$!{table.TableName}")();
#foreach($col in $!{table.Colmuns})
#if(("$!{col.TypeNameJava}" == "java.lang.Boolean"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = true;
#elseif(("$!{col.TypeNameJava}" == "byte[]"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new byte[] {0x32};
#elseif(("$!{col.TypeNameJava}" == "java.lang.Double"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12346.679d;
#elseif(("$!{col.TypeNameJava}" == "java.lang.Float"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 12355.668f;
#elseif("$!{col.TypeNameJava}" == "java.lang.Integer")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 54421;
#elseif("$!{col.TypeNameJava}" == "java.lang.Long")
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = 654221L;
#elseif(("$!{col.TypeNameJava}" == "java.math.BigDecimal"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("2017.10111");
#elseif(("$!{col.TypeNameJava}" == "java.sql.Timestamp") || ("$!{col.TypeNameJava}" == "java.sql.Date") || ("$!{col.TypeNameJava}" == "java.sql.Time"))
    long $!fmtter.fmtVar("$!{col.ColumnName}")CurTime = System.currentTimeMillis();
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}($!fmtter.fmtVar("$!{col.ColumnName}")CurTime);
#elseif(("$!{col.TypeNameJava}" == "java.lang.String"))
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}("$!fmtter.fmtVar("$!{col.ColumnName}")");
#else
    $!{col.TypeNameJava} $!fmtter.fmtVar("$!{col.ColumnName}") = new $!{col.TypeNameJava}();
#end
    mdl.setValueByKey(Mdl$!fmtter.fmtFun("$!{table.TableName}").$!{col.ColumnName}, $!fmtter.fmtVar("$!{col.ColumnName}"));
#end

#foreach($col in $!{table.Colmuns})
    Assert.assertEquals(mdl.get$!{fmtter.fmtFun("$!{col.ColumnName}")}(),
        mdl.getValueByKey( Mdl$!{fmtter.fmtFun("$!{table.TableName}")}.$!{col.ColumnName} ));
#end

  }

  /**
   * 检查是否有遗漏.
   */
  @AfterClass
  public static void checkAll() {
    Method[] testMethods = Mdl$!{fmtter.fmtFun("$!{table.TableName}")}Test.class.getDeclaredMethods();
    Method[] methods = Mdl$!{fmtter.fmtFun("$!{table.TableName}")}.class.getDeclaredMethods();
    ArrayList<Method> error = new ArrayList<Method>();

    HashMap<String, String> map = new HashMap<String, String>();
    for (Method method : testMethods) {
      System.out.println("测试方法：" + method);
      String name = method.getName();
      if (name.startsWith("test")) {
        map.put(name, name.substring(5));
      }
    }
    for (Method method : methods) {
      System.out.print("方法：" + method);
      if (((method.getModifiers() & Modifier.PUBLIC) != 0)
          || ((method.getModifiers() & Modifier.PROTECTED) != 0)) {
        String name = method.getName();

        String testName = "test" + name.substring(0, 1).toUpperCase() + name.substring(1);
        String check = map.get(testName);
        System.out.println(" " + check);
        if (check == null || check.length() <= 0) {
          error.add(method);
        }
      }
    }
    if (error.size() > 0) {
      Assert.fail("请追加对于方法「" + error + "」的测试方法！");
    }
  }
}
